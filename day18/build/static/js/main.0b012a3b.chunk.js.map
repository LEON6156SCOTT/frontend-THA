{"version":3,"sources":["logo.svg","components/Cell.js","components/CellB.js","components/Row.js","components/RowRev.js","components/ChessBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","style","CellB","Row","row","i","push","ChessBoard","col","RowRev","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAAe,I,WCaAA,EAbF,WAQT,OACI,qBAAKC,MAPI,CACT,OAAU,MACV,MAAS,MACT,MAAS,YCSFC,EAdD,WASV,OACI,qBAAKD,MARI,CACT,OAAU,MACV,MAAS,MACT,MAAS,QACT,mBAAoB,YCYbE,EAfH,WAIR,IAFA,IAAIC,EAAM,GAEDC,EAAI,EAAGA,EAAI,EAAGA,IACfA,EAAI,EACJD,EAAIE,KAAK,cAAC,EAAD,KAGTF,EAAIE,KAAK,cAAC,EAAD,KAGjB,OAAOF,GCGID,EAfH,WAIR,IAFA,IAAIC,EAAM,GAEDC,EAAI,EAAGA,EAAI,EAAGA,IACfA,EAAI,EACJD,EAAIE,KAAK,cAAC,EAAD,KAGTF,EAAIE,KAAK,cAAC,EAAD,KAGjB,OAAOF,GCcIG,EA1BI,WAUf,IAPA,IAMIC,EAAM,GACDH,EAAE,EAAGA,EAAI,EAAGA,IACdA,EAAE,EACDG,EAAIF,KAAK,cAACG,EAAD,KAGTD,EAAIF,KAAK,cAAC,EAAD,KAIjB,OACI,qBAAKL,MAjBK,CACV,QAAW,OACX,oBAAuB,kBACvB,OAAU,yBAcV,SACKO,KCfEE,MANf,WACE,OACI,cAAC,EAAD,KCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0b012a3b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const Cell = () => {\n\n    const cell = {\n        \"height\": '5vh',\n        \"width\": '5vh',\n        \"color\": 'white',\n    }\n\n    return (\n        <div style={cell}/>\n    )\n}\n\nexport default Cell;","const CellB = () => {\n\n    const cell = {\n        \"height\": '5vh',\n        \"width\": '5vh',\n        \"color\": 'white',\n        \"background-color\": 'black'\n    }\n\n    return (\n        <div style={cell}/>\n    )\n}\n\nexport default CellB;","import Cell from \"./Cell\";\nimport CellB from \"./CellB\";\n\nconst Row = () => {\n\n    let row = [];\n\n    for (let i = 0; i < 8; i++) {\n        if (i % 2) {\n            row.push(<CellB/>)\n        }\n        else{\n            row.push(<Cell/>)\n        }\n    }\n    return row;\n}\n\nexport default Row;","import Cell from \"./Cell\";\nimport CellB from \"./CellB\";\n\nconst Row = () => {\n\n    let row = [];\n\n    for (let i = 0; i < 8; i++) {\n        if (i % 2) {\n            row.push(<Cell/>)\n        }\n        else{\n            row.push(<CellB/>)\n        }\n    }\n    return row;\n}\n\nexport default Row;","import Row from \"./Row\";\nimport RowRev from \"./RowRev\";\n\nconst ChessBoard = () => {\n\n\n    const chess = {\n        \"display\": 'grid',\n        \"gridTemplateColumns\": \"repeat(8, auto)\",\n        \"border\": \"3vh solid saddlebrown\"\n    }\n\n    let col = [];\n    for (let i=0; i < 8; i++) {\n        if(i%2){\n            col.push(<RowRev/>)\n        }\n        else {\n            col.push(<Row/>)\n        }\n    }\n\n    return (\n        <div style={chess}>\n            {col}\n        </div>\n    )\n}\n\nexport default ChessBoard;","import logo from './logo.svg';\nimport './App.css';\nimport ChessBoard from \"./components/ChessBoard\";\nfunction App() {\n  return (\n      <ChessBoard></ChessBoard>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}