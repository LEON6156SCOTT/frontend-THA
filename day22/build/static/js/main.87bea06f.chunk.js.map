{"version":3,"sources":["components/Templates.js","components/Meme.js","App.js","reportWebVitals.js","index.js"],"names":["Templates","props","className","templates","map","template","onClick","setMeme","style","backgroundImage","url","id","Meme","console","log","meme","box_count","src","Array","_","i","App","useState","setTemplates","useEffect","fetch","then","json","data","memes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAoBeA,EAjBG,SAACC,GAEf,OACI,gCACI,yDACA,qBAAKC,UAAW,YAAhB,SAEQD,EAAME,UAAUC,KAAI,SAAAC,GAAQ,OAAG,8BAC3B,qBAAKC,QAAS,kBAAML,EAAMM,QAAQF,IAAWH,UAAW,SAAUM,MAAO,CAACC,gBAAgB,OAAD,OAASJ,EAASK,IAAlB,SADpDL,EAASM,a,OCkBvDC,G,MA3BF,SAACX,GAIV,OAFAY,QAAQC,IAAIb,EAAMc,KAAKC,WAGnB,gCACI,yDACA,sBAAKd,UAAW,YAAhB,UAEQ,qBAAKA,UAAW,QAASe,IAAKhB,EAAMc,KAAKL,MAE7C,qBAAKR,UAAW,SAAhB,SAEQ,YAAIgB,MAAMjB,EAAMc,KAAKC,YAAYZ,KAAI,SAACe,EAAEC,GAAH,OAAU,yBAAYA,QAGnE,sBAAKlB,UAAW,UAAhB,UACI,wBAAQI,QAAS,kBACbL,EAAMM,QAAQ,OADlB,qBAEA,8DCILc,MAnBf,WACI,MAAkCC,mBAAS,IAA3C,mBAAOnB,EAAP,KAAkBoB,EAAlB,KACA,EAAwBD,mBAAS,MAAjC,mBAAOP,EAAP,KAAaR,EAAb,KAQA,OANAiB,qBAAU,WACNC,MAAM,qCAAqCC,MAAK,SAACX,GAAD,OAAUA,EAAKY,UAAQD,MAAK,SAACE,GACzEL,EAAaK,EAAKA,KAAKC,YAE5B,IAGC,qBAAK3B,UAAU,MAAf,SAEiB,OAATa,EAAgB,cAAC,EAAD,CAAWZ,UAAWA,EAAWI,QAASA,IAAa,cAAC,EAAD,CAAMJ,UAAWA,EAAWI,QAASA,EAASQ,KAAMA,OCN5He,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.87bea06f.chunk.js","sourcesContent":["\nimport './styles/Templates.css'\n\nconst Templates = (props) =>{\n\n    return(\n        <div>\n            <h1>Tanmay's Meme Generator</h1>\n            <div className={'templates'}>\n                {\n                    props.templates.map(template=>(<div key={template.id}>\n                        <div onClick={() => props.setMeme(template)} className={'images'} style={{backgroundImage: `url(${template.url})`}}/>\n                    </div>))\n                }\n            </div>\n        </div>\n    )\n\n\n}\nexport default Templates;","import './styles/Meme.css'\nconst Meme = (props) => {\n\n    console.log(props.meme.box_count)\n\n    return(\n        <div>\n            <h1>Tanmay's Meme Generator</h1>\n            <div className={'container'}>\n                {\n                    <img className={'image'} src={props.meme.url}/>\n                }\n                <div className={'inputs'}>\n                    {\n                        [...Array(props.meme.box_count)].map((_,i) => (<input key={i}/>))\n                    }\n                </div>\n                <div className={'buttons'}>\n                    <button onClick={() =>\n                        props.setMeme(null)}>Go Back</button>\n                    <button>Generate Meme</button>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Meme;","import './App.css';\nimport Templates from \"./components/Templates\";\nimport {useEffect, useState} from \"react\";\nimport Meme from \"./components/Meme\";\n\nfunction App() {\n    const [templates, setTemplates] = useState([]);\n    const [meme, setMeme] = useState(null);\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then((meme) => meme.json()).then((data) => {\n            setTemplates(data.data.memes);\n        })\n    }, [])\n\n    return (\n        <div className=\"App\">\n            {\n                meme === null ? <Templates templates={templates} setMeme={setMeme}/> : <Meme templates={templates} setMeme={setMeme} meme={meme}/>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}